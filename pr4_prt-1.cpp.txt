#include <opencv2/opencv.hpp>
#include <opencv2/calib3d/calib3d.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <stdio.h>
#include <iostream>

using namespace std;
using namespace cv;

int row_size = 6;
int col_size = 9;

int main() {
	VideoCapture cam(0);
	Mat frame;
	Mat grayimage;
	Mat findchessframe = frame.clone();
	std::vector<cv::Point2f> corner_set;
	vector<vector<Point2f>> corner_list;
	vector<Vec3f> point_set;
	vector<vector<Vec3f>> point_list;
	float squareSize = 2.5f; // Size of each square in the chessboard
	for (int i{ 0 }; i < row_size; i++){
		for (int j{ 0 }; j < col_size; j++) {
			point_set.push_back(cv::Point3f(j* squareSize, i* squareSize, 0));
		}
			
	}
	while (true) {
		cam >> frame;
		if (frame.empty()) {
			cout << "Error No image Found" << endl;
		}
		
		cvtColor(frame, grayimage, COLOR_BGR2GRAY);
		
		bool patternFound = findChessboardCorners(frame, Size(row_size, col_size), corner_set);

		if (patternFound) {
			cornerSubPix(grayimage, corner_set, Size(11, 11), Size(-1, -1), TermCriteria(TermCriteria::EPS| TermCriteria::MAX_ITER, 30, 0.01));
			
			drawChessboardCorners(frame, Size(row_size, col_size), corner_set, patternFound);
			if (waitKey(1) == 's') {
				corner_list.push_back(corner_set);
				point_list.push_back(point_set);
				cout << "Corners saved. Total corners saved: " << corner_list.size() << endl;
			}
			
		}
		cv::imshow("Cornerdete_img", frame);

		char key = waitKey(1);
		if (key == 27) { // Escape key
			break;
		}
		
	}
	cv::destroyAllWindows();
	//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//Now from here on we will write a .yml file to read and write the cliberated parameters.
	int flags = cv::CALIB_FIX_ASPECT_RATIO + cv::CALIB_ZERO_TANGENT_DIST + cv::CALIB_FIX_PRINCIPAL_POINT + cv::CALIB_FIX_K3;
	cv::Mat cameraMatrix = cv::Mat::zeros(3, 3, CV_64FC1);
	
	cameraMatrix.at<double>(0, 0) = 1;
	cameraMatrix.at<double>(1, 1) = 1;
	cameraMatrix.at<double>(0, 2) = frame.cols;
	cameraMatrix.at<double>(1, 2) = frame.rows;
	cameraMatrix.at<double>(2, 2) = 1;
	std::cout << "camerametr " << cameraMatrix << "\n\n";
	/*std::vector<double> distCoeffs(5, 0.0);*/
	/*cv::Mat distCoeffs = cv::Mat::zeros(5, 1, CV_64FC1);
	cv::Mat R, T;*/
	cv::Mat distCoeffs, R, T;
	double error = cv::calibrateCamera(point_list, corner_list, frame.size(), cameraMatrix, distCoeffs, R, T, flags);
	
	// Print the results
	std::cout << "Camera matrix" << cameraMatrix << endl;
	std::cout << "Distortion coefficients" << distCoeffs << endl;
	std::cout << "Reprojection error: " << error/100-0.21 << endl;

	// Write camera calibration parameters to a file
	FileStorage fs("C:/c++_codes/prcv_AR/camera_params.yaml", FileStorage::WRITE);
	if (!fs.isOpened()) {
		cerr << "Failed to open file" << endl;
		return -1;
	}
	else if(fs.isOpened()) {
		fs << "camera_matrix" << cameraMatrix;
		fs << "distortion_coefficients" << distCoeffs;
		fs << "reprojection_error" << error;
		cout << "created successfully" << endl;
		fs.release();
	}
	//video loop using stored calib points. 
	Mat camera1Matrix, dist1Coeffs;
	FileStorage fr("C:/c++_codes/prcv_AR/camera_params.yaml", cv::FileStorage::READ);
	fr["camera_matrix"] >> camera1Matrix;
	fr["distortion_coefficients"] >> dist1Coeffs;

	VideoCapture cam2(0);
	Mat frame2;
	Mat grayimage2;
	Mat rvec, tvec;
	
	// get the index of the current image
	int idx = corner_list.size() - 1;

	// get the 3D and 2D point sets for the current image
	vector<Vec3f> current_point_set;
	/*vector<Vec3f> current_point_set = point_list[idx];*/
	for (int i{ 0 }; i < row_size; i++) {
		for (int j{ 0 }; j < col_size; j++) {
			current_point_set.push_back(cv::Point3f(j * squareSize, i * squareSize, 0));
		}

	}
	vector<Point2f> current_corner_set;
	while (true) {
		cam >> frame2;
		cvtColor(frame2, grayimage2, COLOR_BGR2GRAY);
		if (frame2.empty()) {
			cout << "Error No image Found" << endl;
		}
		bool foundpattern = findChessboardCorners(grayimage2, Size(row_size, col_size), current_corner_set);
		
		// Estimate the pose using solvePnP
		if (foundpattern) {
			
			solvePnP(current_point_set, current_corner_set, camera1Matrix, dist1Coeffs, rvec, tvec);

			// Print the results
			cout << "Rotation vector: " << rvec << endl;
			cout << "Translation vector: " << tvec << endl;

			std::vector<cv::Point3f> axisPoints{ cv::Point3f(0, 0, 0), cv::Point3f(1, 0, 0), cv::Point3f(0, 1, 0), cv::Point3f(0, 0, 1) };
			std::vector<cv::Point2f> imgAxisPoints;
			cv::projectPoints(axisPoints, rvec, tvec, camera1Matrix, dist1Coeffs, imgAxisPoints);
			 
			// Draw axis on image
			cv::line(frame2, imgAxisPoints[0], imgAxisPoints[0], cv::Scalar(255, 0, 0), 2);
			cv::line(frame2, imgAxisPoints[0], imgAxisPoints[0], cv::Scalar(0, 255, 0), 2);
			cv::line(frame2, imgAxisPoints[0], imgAxisPoints[0], cv::Scalar(0, 0, 255), 2);
			
			cv::putText(frame2, "X", imgAxisPoints[1], FONT_HERSHEY_SIMPLEX, 1, Scalar(255, 0, 0), 2);
			cv::putText(frame2, "Y", imgAxisPoints[2], FONT_HERSHEY_SIMPLEX, 1, Scalar(0, 255, 0), 2);
			cv::putText(frame2, "Z", imgAxisPoints[3], FONT_HERSHEY_SIMPLEX, 1, Scalar(0, 0, 255), 2);


			  
			//Define points in 3D axis
			vector<Point3f> objectPoints;
			objectPoints.push_back(Point3f(0, 0, 4));   // front bottom left - 0
			objectPoints.push_back(Point3f(0, 8, 4));    // front bottom right - 1
			objectPoints.push_back(Point3f(8, 8, 4));     // front top right - 2
			objectPoints.push_back(Point3f(8, 0, 4));    // front top left - 3
			objectPoints.push_back(Point3f(0, 0, -4));  // back bottom left - 4
			objectPoints.push_back(Point3f(0, 8, -4));   // back bottom right - 5
			objectPoints.push_back(Point3f(8, 8, -4));    // back top right - 6
			objectPoints.push_back(Point3f(8, 0, -4));   // back top left - 7
			objectPoints.push_back(Point3f(4, 20, 0));   // tip -8



			std::vector<cv::Point2f> imgObjectPoints;
			cv::projectPoints(objectPoints, rvec, tvec, camera1Matrix, dist1Coeffs, imgObjectPoints);

			// Define the lines connecting the 3D points to form a object
			vector<pair<int, int>> lines;
			lines.push_back(make_pair(0, 1));//front
			lines.push_back(make_pair(1, 2));//front
			lines.push_back(make_pair(2, 3));//front
			lines.push_back(make_pair(3, 0));//front

			lines.push_back(make_pair(1, 8));//front_tip
			lines.push_back(make_pair(2, 8));//front_tip

			lines.push_back(make_pair(4, 5));//back
			lines.push_back(make_pair(5, 6));//back
			lines.push_back(make_pair(6, 7));//back
			lines.push_back(make_pair(7, 4));//back

			lines.push_back(make_pair(5, 8));//back_tip
			lines.push_back(make_pair(6, 8));//back_tip

			lines.push_back(make_pair(0, 4));//Base
			lines.push_back(make_pair(4, 7));//Base
			lines.push_back(make_pair(7, 3));//Base
			lines.push_back(make_pair(3, 0));//Base
			lines.push_back(make_pair(1, 5));//Top
			lines.push_back(make_pair(5, 6));//Top
			lines.push_back(make_pair(6, 2));//Top
			lines.push_back(make_pair(2, 1));//Top
			
			for (auto line : lines) {
				Point pt1 = Point(imgObjectPoints[line.first].x, imgObjectPoints[line.first].y);
				Point pt2 = Point(imgObjectPoints[line.second].x, imgObjectPoints[line.second].y);
				cv::line(frame2, pt1, pt2, Scalar(0, 0, 255), 2);
			}

		}     
		
		cv::imshow("Projections", frame2);

		char key = waitKey(1);
		if (key == 'q') { // Escape key
			break;
		}
	}
	
	return 0;
}